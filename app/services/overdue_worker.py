import asyncio
import logging
from datetime import datetime, timezone
from sqlalchemy import select, and_

from app.db.session import AsyncSessionLocal
from app.db.models.task import Task, TaskStatus
from app.db.models.groups import Group
from app.db.models.user import User
from app.services.notifier import send_tg_message
from app.services.redis_client import get_redis

log = logging.getLogger(__name__)

SLEEP_SEC = 6000
REDIS_TTL = 24 * 60 * 60


async def overdue_worker():
    log.info("üöÄ –í–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
    try:
        while True:
            try:
                log.info("üîç –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...")
                now = datetime.now(timezone.utc)

                async with AsyncSessionLocal() as session:
                    conds = [
                        Task.deadline.is_not(None),
                        Task.deadline < now,
                        Task.status != TaskStatus.ACCEPTED,
                    ]
                    res = await session.execute(select(Task).where(and_(*conds)))
                    tasks = res.scalars().all()

                if not tasks:
                    # –¢–æ—á–∫–∞ –æ—Ç–º–µ–Ω—ã (shutdown –æ—Ç–º–µ–Ω–∏—Ç —ç—Ç–æ—Ç sleep) ‚Äî —ç—Ç–æ –Ω–æ—Ä–º
                    await asyncio.sleep(SLEEP_SEC)
                    continue

                redis = await get_redis()

                for t in tasks:
                    key = f"overdue:{t.id}"

                    ok = await redis.set(key, "1", ex=REDIS_TTL, nx=True)
                    if not ok:
                        continue

                    async with AsyncSessionLocal() as session:
                        stu = (await session.execute(
                            select(User).where(User.id == t.student_id)
                        )).scalar_one_or_none()
                        grp = (await session.execute(
                            select(Group).where(Group.id == t.group_id)
                        )).scalar_one_or_none()
                        mgr = None
                        if grp and grp.manager_id:
                            mgr = (await session.execute(
                                select(User).where(User.id == grp.manager_id)
                            )).scalar_one_or_none()

                    student_text = (
                        "‚è∞ <b>–î–µ–¥–ª–∞–π–Ω –ø—Ä–æ—à—ë–ª</b>\n"
                        f"<b>{t.title}</b>\n"
                        f"–°—Ç–∞—Ç—É—Å: {t.status}\n"
                        f"–î–µ–¥–ª–∞–π–Ω: {t.deadline or '‚Äî'}\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º."
                    )
                    manager_text = (
                        "üîî <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞</b>\n"
                        f"<b>{t.title}</b>\n"
                        f"–°—Ç—É–¥–µ–Ω—Ç: {stu.full_name or stu.username or stu.id if stu else '‚Äî'}\n"
                        f"–°—Ç–∞—Ç—É—Å: {t.status}\n"
                        f"–î–µ–¥–ª–∞–π–Ω: {t.deadline or '‚Äî'}"
                    )

                    # –Ω–µ –¥–∞—ë–º –æ–¥–Ω–æ–º—É –ø–∞–¥–µ–Ω–∏—é —Å–ª–æ–º–∞—Ç—å —Ü–∏–∫–ª
                    try:
                        if stu and stu.telegram_id:
                            await send_tg_message(stu.telegram_id, student_text)
                        if mgr and mgr.telegram_id:
                            await send_tg_message(mgr.telegram_id, manager_text)
                        log.info({"overdue_notified": True, "task_id": t.id})
                    except Exception:
                        log.exception({"overdue_notify_failed": True, "task_id": t.id})

            except Exception:
                log.exception("overdue_worker iteration error")

            # –í—Ç–æ—Ä–∞—è —Ç–æ—á–∫–∞ —Å–Ω–∞/–æ—Ç–º–µ–Ω—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—á–∫–∏
            await asyncio.sleep(SLEEP_SEC)

    except asyncio.CancelledError:
        log.debug("overdue_worker cancelled")
        return

